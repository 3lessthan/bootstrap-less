@import "./_variables.less";
@import "./mixins/buttons.less";
@import "./mixins/hover.less";

//
// Base styles
//

.btn {
  display:          inline-block;
  font-family:      @btn-font-family;
  font-weight:      @btn-font-weight;
  color:            @body-color;
	text-align:       center;
	vertical-align:   middle;
  user-select:      none;
  background-color: transparent;
	border:           @btn-border-width solid transparent;
	#button-size(@btn-padding-y, @btn-padding-x, @btn-font-size, @btn-line-height, @btn-border-radius);
	#transition(@btn-transition);

	#hover({
    color:           @body-color;
		text-decoration: none;
	});

	&:focus,
	&.focus {
		outline:    0;
		box-shadow: @btn-focus-box-shadow;
	}

	// Disabled comes first so active can properly restyle
	&.disabled,
	&:disabled {
		opacity: @btn-disabled-opacity;
		#box-shadow(none);
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		#box-shadow(@btn-active-box-shadow);

		&:focus {
			#box-shadow(@btn-focus-box-shadow, @btn-active-box-shadow);
		}
	}
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
	pointer-events: none;
}


//
// Alternate buttons
//

//@each $color, $value in $theme-colors {
//  .btn-#{$color} {
//    @include button-variant($value, $value);
//  }
//}
//#button-variant( @background, @border, @hover-background, @hover-border, @active-background, @active-border, @color, @hover-color, @disabled-color, @active-color)
.btn-primary   { #button-variant(@primary, @primary); }
.btn-secondary { #button-variant(@secondary, @secondary); }
.btn-success   { #button-variant(@success, @success); }
.btn-info      { #button-variant(@info, @info); }
.btn-warning   { #button-variant(@warning, @warning); }
.btn-danger    { #button-variant(@danger, @danger); }

//@each $color, $value in $theme-colors {
//  .btn-outline-#{$color} {
//    @if $color == "light" {
//      @include button-outline-variant($value, $gray-900);
//    } @else {
//      @include button-outline-variant($value, $white);
//    }
//  }
//}
//.button-outline-variant( @color, @color-hover, @active-background, @active-border, @active-color )
.btn-outline-primary   { #button-outline-variant(@primary); }
.btn-outline-secondary { #button-outline-variant(@secondary); }
.btn-outline-success   { #button-outline-variant(@success); }
.btn-outline-info      { #button-outline-variant(@info); }
.btn-outline-warning   { #button-outline-variant(@warning); }
.btn-outline-danger    { #button-outline-variant(@danger); }

//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
	font-weight:     @font-weight-normal;
	color:           @link-color;
  text-decoration: @link-decoration;

	#hover({
		color:           @link-hover-color;
		text-decoration: @link-hover-decoration;
	});

	&:focus,
	&.focus {
		text-decoration: @link-hover-decoration;
		box-shadow:      none;
	}

	&:disabled,
	&.disabled {
		color:          @btn-link-disabled-color;
		pointer-events: none;
  }

	// No need for an active state here
}


//
// Button Sizes
//

.btn-lg {
  #button-size(@btn-padding-y-lg, @btn-padding-x-lg, @btn-font-size-lg, @btn-line-height-lg, @btn-border-radius-lg);
}

.btn-sm {
	#button-size(@btn-padding-y-sm, @btn-padding-x-sm, @btn-font-size-sm, @btn-line-height-sm, @btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
	display: block;
	width:   100%;

	// Vertically space out multiple block buttons
	+ .btn-block {
		margin-top: @btn-block-spacing-y;
	}
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
	&.btn-block {
		width: 100%;
	}
}
