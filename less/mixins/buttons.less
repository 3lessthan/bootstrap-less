// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

#button-variant(@background; @border; @hover-background: darken(@background, 7.5%); @hover-border: darken(@border, 10%); @active-background: darken(@background, 10%); @active-border: darken(@border, 12.5%); @color: color-yiq(@background); @hover-color: color-yiq(@hover-background); @disabled-color: color-yiq(@background); @active-color: color-yiq(@active-background)) {
	color:            @color;
	#gradient-bg(@background);
	border-color:     @border;
	#box-shadow(@btn-box-shadow);

	#hover({
		color:            @hover-color;
		background-color: @hover-background;
		border-color:     @hover-border;
	});

	&:focus,
	&.focus {
		// Avoid using mixin so we can pass custom focus shadow properly
		& when (@enable-shadows) {
			box-shadow: @btn-box-shadow, 0 0 0 @btn-focus-width rgba(mix(@color, @border, 15%), .5);
		}
		& when not (@enable-shadows) {
			box-shadow: 0 0 0 @btn-focus-width rgba(mix(@color, $border, 15%), .5);
		}
	}

	// Disabled comes first so active can properly restyle
	&.disabled,
	&:disabled {
		color:            @disabled-color;
		background-color: @background;
    border-color:     @border;
    // Remove CSS gradients if they're enabled
    & when (@enable-gradients) {
      background-image: none;
    }
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active,
	.show > &.dropdown-toggle {
		color:            @active-color;
		background-color: @active-background;
		border-color:     @active-border;

		&:focus {
		// Avoid using mixin so we can pass custom focus shadow properly
		& when (@enable-shadows) {
			box-shadow: @btn-active-box-shadow, 0 0 0 @btn-focus-width rgba(mix(@color, @border, 15%), .5);
		}
		& when not (@enable-shadows) {
			box-shadow: 0 0 0 @btn-focus-width rgba(mix(@color, $border, 15%), .5);
		}
		}
	}
}

#button-outline-variant(@color; @color-hover: color-yiq(@color); @active-background: @color; @active-border: @color; @active-color: color-yiq(@active-background)) {
  color:            @color;
	border-color:     @color;

	#hover {
		color:            @color-hover;
		background-color: @active-background;
		border-color:     @active-border;
	}

	&:focus,
	&.focus {
		box-shadow: 0 0 0 @btn-focus-width fade(@color, 50%);
	}

	&.disabled,
	&:disabled {
		color:            @color;
		background-color: transparent;
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active,
	.show > &.dropdown-toggle {
		color:            @active-color;
		background-color: @active-background;
		border-color:     @active-border;

		&:focus {
			// Avoid using mixin so we can pass custom focus shadow properly
      & when (@enable-shadows) and not (@btn-active-box-shadow = ~"") {
        box-shadow: @btn-active-box-shadow, 0 0 0 @btn-focus-width fade(@color, 50%);
      }
      & when not (@enable-shadows) or (@btn-active-box-shadow = ~"") {
        box-shadow: 0 0 0 @btn-focus-width fade(@color, 50%);
      }
		}
	}
}

// Button sizes
#button-size(@padding-y; @padding-x; @font-size; @line-height; @border-radius) {
	padding:     @padding-y @padding-x;
	font-size:   @font-size;
	line-height: @line-height;
	// Manually declare to provide an override to the browser default
	& when (@enable-rounded) {
		border-radius: @border-radius;
	}
	& when not (@enable-rounded) {
		border-radius: 0;
	}
}